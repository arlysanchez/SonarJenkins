// üöÄ Jenkinsfile - Pipeline de CI/CD para aplicaci√≥n ecommerce
// üì¶ Este pipeline automatiza el proceso de construcci√≥n, pruebas y despliegue

pipeline {
    agent any

    // üõ†Ô∏è Configuraci√≥n de herramientas necesarias
    tools {
        maven 'MAVEN_HOME'
    }

    // üîß Definici√≥n de variables globales
    environment {
        DOCKER_PROJECT_NAME = 'ecomapp'
        APP_CONTAINER_NAME = 'product_app'
        DB_CONTAINER_NAME = 'mysql-ecommerce-prod'
        DB_NAME = 'ecommerce_lp2_prod'
        DB_USER = 'root'
        DB_PASSWORD = 'admin123'
        REPO_URL = 'https://github.com/arlysanchez/ecommerce_Dockerizado.git'
    }

    stages {
        // üì• Etapa 1: Clonaci√≥n del repositorio y verificaci√≥n
        stage('Clone') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    echo 'üîÑ === INICIO: CLONACI√ìN DEL REPOSITORIO ==='
                    cleanWs()
                    git branch: 'main', url: "${REPO_URL}"

                    echo 'üìã === VERIFICACI√ìN DE ARCHIVOS SQL ==='
                    sh 'ls -la sql/'
                    sh '''
                        if [ -f "sql/init.sql" ]; then
                            echo "‚úÖ Archivo init.sql encontrado correctamente"
                            echo "üìÑ Contenido inicial del archivo:"
                            head -n 5 sql/init.sql
                        else
                            echo "‚ùå ERROR: Archivo init.sql no encontrado"
                            exit 1
                        fi
                    '''
                    echo '‚úÖ === FIN: CLONACI√ìN Y VERIFICACI√ìN COMPLETADA ==='
                }
            }
        }

        // üèóÔ∏è Etapa 2: Construcci√≥n del proyecto
        stage('Build') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    echo 'üî® === INICIO: CONSTRUCCI√ìN DEL PROYECTO ==='
                    sh 'mvn -DskipTests clean package'
                    echo '‚úÖ === FIN: CONSTRUCCI√ìN COMPLETADA ==='
                }
            }
        }

        // üß™ Etapa 3: Ejecuci√≥n de pruebas
        stage('Test') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    echo 'üß™ === INICIO: EJECUCI√ìN DE PRUEBAS ==='
                    sh 'mvn test -DskipTests'
                    echo '‚úÖ === FIN: PRUEBAS COMPLETADAS ==='
                }
            }
        }

        // üìä Etapa 4: An√°lisis de calidad con SonarQube
        stage('Sonar Analysis') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    echo 'üìä === INICIO: AN√ÅLISIS DE CALIDAD ==='
                    withSonarQubeEnv('sonarqube') {
                        sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.0.2155:sonar -Pcoverage'
                    }
                    echo '‚úÖ === FIN: AN√ÅLISIS DE CALIDAD COMPLETADO ==='
                }
            }
        }

        // üéØ Etapa 5: Verificaci√≥n de calidad
        stage('Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    echo 'üéØ === VERIFICACI√ìN DE EST√ÅNDARES DE CALIDAD ==='
                    waitForQualityGate abortPipeline: true
                    echo '‚úÖ === FIN: VERIFICACI√ìN DE CALIDAD COMPLETADA ==='
                }
            }
        }

        // üöÄ Etapa 6: Despliegue de la aplicaci√≥n
        stage('Deploy Application') {
            steps {
                echo 'üöÄ === INICIO: PROCESO DE DESPLIEGUE ==='
                dir('docker') {
                    script {
                        // üßπ Limpieza de despliegue anterior
                        echo '1Ô∏è‚É£ Limpiando despliegue anterior...'
                        try {
                            sh "docker-compose -p ${DOCKER_PROJECT_NAME} down -v --remove-orphans"
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è Advertencia: ${e.getMessage()}"
                        }

                        // üèóÔ∏è Construcci√≥n y levantamiento de servicios
                        echo '2Ô∏è‚É£ Construyendo y levantando servicios...'
                        sh "docker-compose -p ${DOCKER_PROJECT_NAME} up -d --build"

                        // üíæ Inicializaci√≥n de la base de datos
                        echo '3Ô∏è‚É£ Inicializando base de datos...'
                        sleep(30)
                        sh "docker exec -i ${DB_CONTAINER_NAME} mysql -u${DB_USER} -p${DB_PASSWORD} ${DB_NAME} < ../sql/init.sql"

                        // üîç Verificaci√≥n de la base de datos
                        echo '4Ô∏è‚É£ Verificando estructura de la base de datos...'
                        sh "docker exec ${DB_CONTAINER_NAME} mysql -u${DB_USER} -p${DB_PASSWORD} -e 'USE ${DB_NAME}; SHOW TABLES;'"

                        // ‚è≥ Espera y verificaci√≥n de la aplicaci√≥n
                        echo '5Ô∏è‚É£ Esperando inicio de la aplicaci√≥n...'
                        sleep(30)
                        echo '6Ô∏è‚É£ Mostrando logs de la aplicaci√≥n:'
                        sh "docker logs --tail 200 ${APP_CONTAINER_NAME}"
                    }
                }
                echo '‚úÖ === FIN: DESPLIEGUE COMPLETADO ==='
            }
        }
    }

    // üìù Acciones post-ejecuci√≥n
    post {
        always {
            echo 'üèÅ === FINALIZACI√ìN DEL PIPELINE ==='
        }
        success {
            echo 'üéâ ‚úì Pipeline completado exitosamente'
        }
        failure {
            echo 'üí• ‚úó Pipeline fall√≥'
        }
    }
}
